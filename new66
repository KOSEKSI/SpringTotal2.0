package com.tma.user.info.action;

import java.io.IOException;
import java.io.PrintWriter;
import java.lang.invoke.MethodHandles;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.TreeSet;

import javax.naming.Context;
import javax.portlet.PortletContext;
import javax.portlet.PortletRequestDispatcher;
import javax.portlet.ResourceRequest;
import javax.portlet.ResourceResponse;
import javax.servlet.RequestDispatcher;
import javax.servlet.ServletConfig;
import javax.servlet.ServletContext;
import javax.servlet.ServletException;
import javax.servlet.ServletRequest;
import javax.servlet.ServletResponse;
import javax.servlet.http.HttpSession;

import org.osgi.service.component.annotations.Component;

import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.ProjectionFactoryUtil;
import com.liferay.portal.kernel.dao.orm.RestrictionsFactoryUtil;
import com.liferay.portal.kernel.json.JSONArray;
import com.liferay.portal.kernel.json.JSONFactoryUtil;
import com.liferay.portal.kernel.json.JSONObject;
import com.liferay.portal.kernel.log.Log;
import com.liferay.portal.kernel.log.LogFactoryUtil;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.portlet.bridges.mvc.BaseMVCResourceCommand;
import com.liferay.portal.kernel.portlet.bridges.mvc.MVCResourceCommand;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.ParamUtil;
import com.tma.user.info.constants.UserInfoPortletKeys;
import com.tma.user.info.util.UserDetails;

@Component(
		immediate = true,
		property = {
				"javax.portlet.name="+ UserInfoPortletKeys.UserInfo,
				"mvc.command.name=" + UserInfoPortletKeys.FETCH_USERS
		},
		service = MVCResourceCommand.class
		)

public class UserInfoResourceCommand extends BaseMVCResourceCommand{
	private static Log logger=LogFactoryUtil.getLog(MethodHandles.lookup().lookupClass());
	@Override
	protected void doServeResource(ResourceRequest req, ResourceResponse res)
			throws Exception {
		DynamicQuery dynamicQuery = DynamicQueryFactoryUtil.forClass(User.class);
		logger.info("******** Working ********");
		String key=ParamUtil.getString(req, "search", null);
		System.out.println(" ajax request  is::"+key);
		HashMap<String, TreeSet<String>> map=new HashMap<>();
		HashMap<String, List<User>> map1=new HashMap<>();
		TreeSet<String> set = null;
		List<User> userInfo=null;
		if(map.isEmpty()) {
		
		userInfo=UserLocalServiceUtil.getUsers(1,UserLocalServiceUtil.getUsersCount()-1);
		
		set = new TreeSet<String>();
		for (User  user : userInfo) {
			set.add(user.getScreenName());
			
			
		}
		map.put("result", set);
		
		map1.put("list",userInfo);
		}
		else
		{	userInfo=map1.get("list");
			set=map.get("result");
		}
		
		
		
		
		
		int count= UserLocalServiceUtil.getUsersCount();
		//System.out.println(count);
		if(key.equals("key")) {
			
			JSONArray UList = JSONFactoryUtil.createJSONArray();
			
			for (String user : set)
			{ 
				JSONObject JSONFname = JSONFactoryUtil.createJSONObject();
				JSONFname.put("fullname",user);
				UList.put(JSONFname);

			}//for loop
			res.getWriter().write(UList.toString());
		}

		
		
		
		else if(key.equals("byname")) {
			JSONArray UList2 = JSONFactoryUtil.createJSONArray();
			String name=ParamUtil.getString(req, "searchbyname", null);
			for (String u: set)
			{   
				if(u.trim().startsWith(name.toLowerCase().trim()) || u.toLowerCase().trim().contains(name.toLowerCase().trim())) {
					//logger.info("executing................");
					JSONObject JSONFname = JSONFactoryUtil.createJSONObject();
					JSONFname.put("fullname",u);
					UList2.put(JSONFname);
				}
				else
				{
					
				}

			}//for loop
			res.getWriter().write(UList2.toString());
		}

		else if(key.equals("count")) {

			String count2=String.valueOf(UserLocalServiceUtil.getUsersCount());

			//System.out.println("list of users"+count2);
			res.getWriter().write(count2.toString());

		}

		else if(key.equals("scroll")) {

			int start=ParamUtil.getInteger(req, "start");
			int end=ParamUtil.getInteger(req, "end");
			List<User> userInfo3=UserLocalServiceUtil.getUsers(start,end);
			JSONArray UList = JSONFactoryUtil.createJSONArray();
			for (User user : userInfo3)
			{ 
				JSONObject JSONFname = JSONFactoryUtil.createJSONObject();
				JSONFname.put("fullname",user.getScreenName());
				UList.put(JSONFname);

			}//for loop
			res.getWriter().write(UList.toString());

		}



		else if(key.equals("bygroup")) {
		JSONArray UList5 = JSONFactoryUtil.createJSONArray();
			String scname=ParamUtil.getString(req, "scname", null);
			String email=ParamUtil.getString(req, "email", null);
			String dept=ParamUtil.getString(req, "dept1", null);
			String role=ParamUtil.getString(req, "role", null);
			String status2=ParamUtil.getString(req, "status", null);
			System.out.println("scname"+scname);
			System.out.println("email"+email);
			System.out.println("dept"+dept);
			System.out.println("role"+role);
			System.out.println("status"+status2);
			
			
			
			JSONArray UList = JSONFactoryUtil.createJSONArray();
			JSONObject JSONFname2 = JSONFactoryUtil.createJSONObject();
			if(scname!=null && scname!="")
			{
				
				dynamicQuery.add(RestrictionsFactoryUtil.eq("screenName",scname ));
				dynamicQuery.add(RestrictionsFactoryUtil.eq("screenName",scname ));
				dynamicQuery.setProjection(ProjectionFactoryUtil.property("screenName"));
				List<String> usernames = UserLocalServiceUtil.dynamicQuery(dynamicQuery);
				for (String u:usernames) {

					JSONObject JSONFname = JSONFactoryUtil.createJSONObject();
					JSONFname.put("fullname",u);
					UList.put(JSONFname);
				}
			}
			if(scname!=null && scname!="" && email!="" &&email!=null)
			{
				
				dynamicQuery.add(RestrictionsFactoryUtil.eq("screenName",scname ));
				dynamicQuery.add(RestrictionsFactoryUtil.eq("emailAddress",email ));
				dynamicQuery.setProjection(ProjectionFactoryUtil.property("screenName"));
				List<String> usernames = UserLocalServiceUtil.dynamicQuery(dynamicQuery);
				for (String u:usernames) {

					JSONObject JSONFname = JSONFactoryUtil.createJSONObject();
					JSONFname.put("fullname",u);
					UList.put(JSONFname);
				}
			}
	

			res.getWriter().write(UList.toJSONString());
		}

		
		
		
		
		
		
		else if(key.equals("individual")) {
			String fname=ParamUtil.getString(req, "searchid", null);
			System.out.println("value is::::"+fname);
			JSONObject JSONdetails = JSONFactoryUtil.createJSONObject();
			String status="inactive";
			for (User user : userInfo)
			{ 
				
				if(user.getScreenName().equalsIgnoreCase(fname) )
				{    
					
					JSONdetails.put("dept"," ");
					JSONdetails.put("role"," ");
					JSONdetails.put("scname",user.getScreenName());
					JSONdetails.put("name",user.getFullName());
					JSONdetails.put("email",user.getEmailAddress());
					JSONdetails.put("rmanager","srinivas reddy");
					JSONdetails.put("rhod","naveen kumar");
					JSONdetails.put("mobile","9585XXXX21");
					JSONdetails.put("Gender","male");
					JSONdetails.put("dob","xx-xx-xxxx");
					if(user.getStatus()==0) { status="active";}
					else { status="inactive";}
					JSONdetails.put("status", status);
				}
				else
				{
					System.out.println("no data found");
				}
				
				



			}//for loop
			res.getWriter().write(JSONdetails.toJSONString());
		}
		else 
		{
			
		}

		logger.info("******** End ********");
	}//method close
}//class 

