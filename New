package com.tma.user.info.action;

import java.io.IOException;
import java.io.PrintWriter;
import java.lang.invoke.MethodHandles;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.TreeSet;

import javax.naming.Context;
import javax.portlet.PortletContext;
import javax.portlet.PortletRequestDispatcher;
import javax.portlet.ResourceRequest;
import javax.portlet.ResourceResponse;
import javax.servlet.RequestDispatcher;
import javax.servlet.ServletConfig;
import javax.servlet.ServletContext;
import javax.servlet.ServletException;
import javax.servlet.ServletRequest;
import javax.servlet.ServletResponse;
import javax.servlet.http.HttpSession;

import org.osgi.service.component.annotations.Component;

import com.liferay.portal.kernel.json.JSONArray;
import com.liferay.portal.kernel.json.JSONFactoryUtil;
import com.liferay.portal.kernel.json.JSONObject;
import com.liferay.portal.kernel.log.Log;
import com.liferay.portal.kernel.log.LogFactoryUtil;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.portlet.bridges.mvc.BaseMVCResourceCommand;
import com.liferay.portal.kernel.portlet.bridges.mvc.MVCResourceCommand;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.ParamUtil;
import com.tma.user.info.constants.UserInfoPortletKeys;
import com.tma.user.info.util.UserDetails;

@Component(
		immediate = true,
		property = {
				"javax.portlet.name="+ UserInfoPortletKeys.UserInfo,
				"mvc.command.name=" + UserInfoPortletKeys.FETCH_USERS
		},
		service = MVCResourceCommand.class
		)

public class UserInfoResourceCommand extends BaseMVCResourceCommand{
	private static Log logger=LogFactoryUtil.getLog(MethodHandles.lookup().lookupClass());
	@Override
	protected void doServeResource(ResourceRequest req, ResourceResponse res)
			throws Exception {

		logger.info("******** Working ********");
		String key=ParamUtil.getString(req, "search", null);
		//System.out.println(" ajax request  is::"+key);
		HashMap<String, String> result=new HashMap<>();


		//List<User> userInfo=UserLocalServiceUtil.getUsers(104,115);
		List<User> userInfo=UserLocalServiceUtil.getUsers(1,UserLocalServiceUtil.getUsersCount());
		List<User> userInfo2=UserLocalServiceUtil.getUsers(1,UserLocalServiceUtil.getUsersCount());
		TreeSet<String> set = new TreeSet<String>();
		for (User  user : userInfo2) {
			set.add(user.getFullName().toLowerCase());
			
		}
		int count= UserLocalServiceUtil.getUsersCount();
		//System.out.println(count);
		if(key.equals("key")) {
			
			JSONArray UList = JSONFactoryUtil.createJSONArray();
			
			for (String user : set)
			{ 
				JSONObject JSONFname = JSONFactoryUtil.createJSONObject();
				JSONFname.put("fullname",user);
				UList.put(JSONFname);

			}//for loop
			res.getWriter().write(UList.toString());
		}

		else if(key.equals("byname")) {
			JSONArray UList2 = JSONFactoryUtil.createJSONArray();
			String name=ParamUtil.getString(req, "searchbyname", null);
			for (User user : userInfo)
			{   
				if(user.getFullName().toLowerCase().trim().startsWith(name.toLowerCase().trim()) || user.getFullName().toLowerCase().trim().contains(name.toLowerCase().trim())) {
					//logger.info("executing................");
					JSONObject JSONFname = JSONFactoryUtil.createJSONObject();
					JSONFname.put("fullname",user.getFullName());
					UList2.put(JSONFname);
				}
				else
				{
					result.put("resultdata","result-not-found");
				}

			}//for loop
			res.getWriter().write(UList2.toString());
		}

		else if(key.equals("count")) {

			String count2=String.valueOf(UserLocalServiceUtil.getUsersCount());

			//System.out.println("list of users"+count2);
			res.getWriter().write(count2.toString());

		}

		else if(key.equals("scroll")) {

			int start=ParamUtil.getInteger(req, "start");
			int end=ParamUtil.getInteger(req, "end");
			List<User> userInfo3=UserLocalServiceUtil.getUsers(start,end);
			JSONArray UList = JSONFactoryUtil.createJSONArray();
			for (User user : userInfo3)
			{ 
				JSONObject JSONFname = JSONFactoryUtil.createJSONObject();
				JSONFname.put("fullname",user.getFullName());
				UList.put(JSONFname);

			}//for loop
			res.getWriter().write(UList.toString());

		}


		else if(key.equals("bygroup")) {
		JSONArray UList5 = JSONFactoryUtil.createJSONArray();
			String scname=ParamUtil.getString(req, "scname", null);
			String email=ParamUtil.getString(req, "email", null);
			String dept=ParamUtil.getString(req, "dept1", null);
			String role=ParamUtil.getString(req, "role", null);
			String status2=ParamUtil.getString(req, "status", null);
			JSONArray UList3 = JSONFactoryUtil.createJSONArray();
			String status="inactive";
			List<User> userinfo6=UserLocalServiceUtil.getUsers(1,UserLocalServiceUtil.getUsersCount());
			JSONArray UList = JSONFactoryUtil.createJSONArray();
			JSONObject JSONFname2 = JSONFactoryUtil.createJSONObject();
			
			if(dept!="-1" && dept.equalsIgnoreCase("hr")) {
				JSONFname2.put("fullname","surya a");
				UList.put(JSONFname2);
				}
			else if(dept!="-1" && dept.equalsIgnoreCase("developers")) {
				JSONFname2.put("fullname","raju d");
				JSONFname2.put("fullname","naveen r");
				UList.put(JSONFname2);
				}
			else if(role!="-1" && role.equalsIgnoreCase("srDeveloper")) {
				JSONFname2.put("fullname","raju d");
				UList.put(JSONFname2);
				}
			else {}
			for (User user : userinfo6)
			{
				
				
				JSONObject JSONFname = JSONFactoryUtil.createJSONObject();
				
				
				if(scname!=null && scname!="" && user.getFullName().toLowerCase().contains(scname.toLowerCase())) {
				JSONFname.put("fullname",user.getFullName());
				UList.put(JSONFname);
				}
				else if(status2!=null && status2!="" && (user.getStatus()==0 || status2=="active")) {
					JSONFname.put("fullname",user.getFullName());
					UList.put(JSONFname);
					}
				else if(status2!=null && status2!="" && (user.getStatus()==0 || status2=="inactive")) {
					JSONFname.put("fullname",user.getFullName());
					UList.put(JSONFname);
					}
				else if(email!=null && email!=""&&  user.getEmailAddress().toLowerCase().contains(email.toLowerCase())) {
					JSONFname.put("fullname",user.getFullName());
					UList.put(JSONFname);
					}
				
				else
				{
					
				}
				

			}//for loop
			
			res.getWriter().write(UList.toString());
		}

		
		
		
		
		
		else if(key.equals("individual")) {
			//JSONArray UList2 = JSONFactoryUtil.createJSONArray();
			String fname=ParamUtil.getString(req, "searchid", null);
			String status="inactive";
			System.out.println("value is::::"+fname);
			JSONObject JSONdetails = JSONFactoryUtil.createJSONObject();
			for (User user : userInfo)
			{ 
				
				if(user.getFullName().equals(fname))
				{
					//logger.info("executing::::::::::::::::::");
					if(fname.equals("raju d")) {
						JSONdetails.put("dept","Developers");
						JSONdetails.put("role","Sr.developer");
					}
					else if(fname.equals("naveen r")) {
						JSONdetails.put("dept","Developers");
						JSONdetails.put("role","Jr.Developer");
					}
					else if(fname.equals("surya a")) {
						JSONdetails.put("dept","HR");
						JSONdetails.put("role","Hr");
					}
					else
					{
						JSONdetails.put("dept"," ");
						JSONdetails.put("role"," ");
					}
					JSONdetails.put("scname",user.getScreenName());
					JSONdetails.put("name",user.getFullName());
					JSONdetails.put("email",user.getEmailAddress());
					
					
					JSONdetails.put("rmanager","srinivas reddy");
					JSONdetails.put("rhod","naveen kumar");
					JSONdetails.put("mobile","9585XXXX21");
					JSONdetails.put("Gender","male");
					JSONdetails.put("dob","xx-xx-xxxx");
					if(user.getStatus()==0) { status="active";}
					else { status="inactive";}
					JSONdetails.put("status", status);
				}
				
				



			}//for loop
			res.getWriter().write(JSONdetails.toJSONString());
		}
		else 
		{
			res.getWriter().write(result.get("result"));
		}

		logger.info("******** End ********");
	}//method close
}//class 
