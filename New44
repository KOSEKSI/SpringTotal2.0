package com.tma.user.info.action;

import java.io.IOException;
import java.io.PrintWriter;
import java.lang.invoke.MethodHandles;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.TreeSet;

import javax.naming.Context;
import javax.portlet.PortletContext;
import javax.portlet.PortletRequestDispatcher;
import javax.portlet.ResourceRequest;
import javax.portlet.ResourceResponse;
import javax.servlet.RequestDispatcher;
import javax.servlet.ServletConfig;
import javax.servlet.ServletContext;
import javax.servlet.ServletException;
import javax.servlet.ServletRequest;
import javax.servlet.ServletResponse;
import javax.servlet.http.HttpSession;

import org.osgi.service.component.annotations.Component;

import com.liferay.portal.kernel.json.JSONArray;
import com.liferay.portal.kernel.json.JSONFactoryUtil;
import com.liferay.portal.kernel.json.JSONObject;
import com.liferay.portal.kernel.log.Log;
import com.liferay.portal.kernel.log.LogFactoryUtil;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.portlet.bridges.mvc.BaseMVCResourceCommand;
import com.liferay.portal.kernel.portlet.bridges.mvc.MVCResourceCommand;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.ParamUtil;
import com.tma.user.info.constants.UserInfoPortletKeys;
import com.tma.user.info.util.UserDetails;
import com.tma.user.info.util.UsersList;

@Component(
		immediate = true,
		property = {
				"javax.portlet.name="+ UserInfoPortletKeys.UserInfo,
				"mvc.command.name=" + UserInfoPortletKeys.FETCH_USERS
		},
		service = MVCResourceCommand.class
		)

public class UserInfoResourceCommand extends BaseMVCResourceCommand{
	private static Log logger=LogFactoryUtil.getLog(MethodHandles.lookup().lookupClass());
	@Override
	protected void doServeResource(ResourceRequest req, ResourceResponse res)
			throws Exception {

		logger.info("******** Working ********");
		String key=ParamUtil.getString(req, "search", null);
		int count= UserLocalServiceUtil.getUsersCount();
		List<User> users=UserLocalServiceUtil.getUsers(4, UserLocalServiceUtil.getUsersCount());
		TreeSet<String> tusers=new TreeSet();
		TreeSet<User> detais=(TreeSet<User>) UserLocalServiceUtil.getUsers(4, UserLocalServiceUtil.getUsersCount());
		
		
		for(User user:users)
		{
			tusers.add(user.getFullName());
			
		}
		if(key.equals("key")) {
			
			JSONArray UList = JSONFactoryUtil.createJSONArray();
			
			for (String user : tusers)
			{ 
				JSONObject JSONFname = JSONFactoryUtil.createJSONObject();
				JSONFname.put("fullname",user);
				UList.put(JSONFname);

			}//for loop
			res.getWriter().write(UList.toString());
		}
		else {
			
		}
		
	}
}//class 











